#!/usr/bin/python3
# -*- coding: utf-8 -*-
# v.0.0.1

from scipy.stats import norm
import xml.etree.ElementTree as ET

class Polinom:
    def __init__(self,coeff):
        self._coeff = coeff

    def __call__(self, X):
        res = 0
        for c in self._coeff: res = res*X+c
        return res

    def getXMl(self,):
        root = ET.Element('N42InstrumentData')
        ET.SubElement(root,'Remark').text='Specter generated by software \"spectreCreator\"\nhttps://github.com/MakedonskyLF/spectreCreator'

class Calibration:

    def getch(self, en):
        return self._enCoeff[0] + self._enCoeff[1] * en

    def geten(self, eh):
        return (eh - self._enCoeff[0]) / self._enCoeff[1]

    def getarea(self, en, peaken):
        sigma = self._cdfCoeff[0] + self._cdfCoeff[1] * en
        return norm.cdf(en, peaken, sigma)

    def __init__(self,
                 encoeff,
                 cdfcoeff,
                 entoch=None,
                 chtoen=None,
                 getarea=None):
        self._enCoeff = encoeff
        self._cdfCoeff = cdfcoeff
        if entoch: self.getch = lambda en: entoch(self, en)
        if chtoen: self.geten = lambda ch: entoch(self, ch)
        if getarea: self.getarea = lambda en, peaken: getarea(self, en, peaken)


class Spectrometer:
    def __init__(self, calibration, channels=2 ** 10, minen=0, maxen=3000):
        self.calibration = calibration
        self.channels = channels
        self.minEn = minen
        self.maxEn = maxen

    def save(self,fname,default=False):
        if default:
            root = ET.Element('N42InstrumentData')
            ET.SubElement(root,'Remark').text='Specter generated by software \"spectreCreator\"\nhttps://github.com/MakedonskyLF/spectreCreator'
            measurement=ET.SubElement(root,'Measurement')
            instrumentinformation=ET.SubElement(measurement,'InstrumentInformation')
            ET.SubElement(instrumentinformation, 'InstrumentType').text = 'Spectrometer'
            ET.SubElement(instrumentinformation, 'InstrumentVersion').text = '0.0.1'
            spectrum=ET.SubElement(measurement, 'Spectrum')
            encalibration=ET.SubElement(spectrum, 'Calibration',{'Type':'Energy','EnergyUnits':'keV'})
            eq=ET.SubElement(encalibration, 'Equation',{'Model':'Polynomial','Form':'Channel = c1 + c2 * Energy'})
            ET.SubElement(eq, 'Coefficients').text = ' '.join(map(str,self.calibration._enCoeff))
            sigmacalibration=ET.SubElement(spectrum, 'Calibration',{'Type':'FWHM','EnergyUnits':'keV','FWHMUnits':'Energy'})
            eq=ET.SubElement(sigmacalibration, 'Equation',{'Model':'Polynomial','Form':'FWHM = c1 + c2 * Energy'})
            ET.SubElement(eq, 'Coefficients').text = ' '.join(map(str,self.calibration._cdfCoeff))
            ET.SubElement(spectrum, 'StartTime').text = '2004-11-03T14:36:04+03:00'# TODO make parser
            ET.SubElement(spectrum, 'ChannelData').text = ' '.join(map(str,self.channels))
            aresult=ET.SubElement(measurement, 'AnalysisResults')
            ET.SubElement(aresult, 'Remark').text = 'Nuclides used for specter generation'
            nuclides=ET.SubElement(aresult, 'NuclideAnalysis',{'ActivityUnits':'Bq'})
            nuclide = ET.SubElement(nuclides, 'Nuclide')
            ET.SubElement(nuclide, 'NuclideName').text = 'Co-60'
            ET.SubElement(nuclide, 'NuclideActivity').text = '1000 0'

            nuclide = ET.SubElement(nuclides, 'Nuclide')
            ET.SubElement(nuclide, 'NuclideName').text = 'Am-241'
            ET.SubElement(nuclide, 'NuclideActivity').text = '500.0 0'
        else:
            tree=ET.parse('country_data.xml')
            root=tree.getroot()
        root.findall()
        ET.ElementTree(root).write(fname,encoding='UTF-8')